<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="dev-master@9d2179f9edcbd9a20d4dceb7711fa28f8cc12e33">
  <file src="src/Reflection/Attribute/ReflectionAttributeHelper.php">
    <ImpureMethodCall>
      <code>toLowerString</code>
      <code>toLowerString</code>
    </ImpureMethodCall>
    <ImpurePropertyFetch>
      <code>$attributeNode-&gt;name</code>
      <code>$attributeNode-&gt;name</code>
      <code>$attributesGroupNode-&gt;attrs</code>
      <code>$attributesGroupNode-&gt;attrs</code>
    </ImpurePropertyFetch>
  </file>
  <file src="src/Reflection/ReflectionAttribute.php">
    <ImpureFunctionCall>
      <code>array_map</code>
    </ImpureFunctionCall>
    <ImpureMethodCall>
      <code>reflectClass</code>
      <code>toString</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Reflection/ReflectionClass.php">
    <ImpureFunctionCall>
      <code>$createMethod(
            'from',
            [$valueParameter],
            new Node\Identifier('static'),
        )</code>
      <code>$createMethod(
            'tryFrom',
            [$valueParameter],
            new Node\NullableType(new Node\Identifier('static')),
        )</code>
      <code>$createMethod($aliasMethodName)</code>
      <code>$createMethod($method-&gt;getAliasName())</code>
      <code>$createMethod('cases', [], new Node\Identifier('array'))</code>
      <code>$createProperty('name', 'string')</code>
      <code>$createProperty('name', 'string')</code>
      <code>$createProperty('value', $node-&gt;scalarType)</code>
      <code>$createProperty('value', new Node\UnionType([
                    new Node\Identifier('int'),
                    new Node\Identifier('string'),
                ]))</code>
      <code>array_map</code>
      <code>array_map</code>
      <code>array_map</code>
      <code>array_map</code>
      <code>array_map</code>
    </ImpureFunctionCall>
    <ImpureMethodCall>
      <code>createEmpty</code>
      <code>createEmpty</code>
      <code>createEmpty</code>
      <code>createEmpty</code>
      <code>createEmpty</code>
      <code>createFromNode</code>
      <code>createFromNode</code>
      <code>createFromNode</code>
      <code>createFromNode</code>
      <code>getConstants</code>
      <code>getConstants</code>
      <code>getConstants</code>
      <code>getConstants</code>
      <code>getEndLine</code>
      <code>getEndLine</code>
      <code>getEndLine</code>
      <code>getEndLine</code>
      <code>getMethods</code>
      <code>getMethods</code>
      <code>getMethods</code>
      <code>getMethods</code>
      <code>getMethods</code>
      <code>getMethods</code>
      <code>getMethods</code>
      <code>getMethods</code>
      <code>getProperties</code>
      <code>getProperties</code>
      <code>getProperties</code>
      <code>getProperties</code>
      <code>getStartLine</code>
      <code>getStartLine</code>
      <code>getStartLine</code>
      <code>getStartLine</code>
      <code>getTraitUses</code>
      <code>getTraitUses</code>
      <code>getTraitUses</code>
      <code>getTraitUses</code>
      <code>getTraitUses</code>
      <code>getTraitUses</code>
      <code>getTraitUses</code>
      <code>getTraitUses</code>
      <code>isAbstract</code>
      <code>isFinal</code>
      <code>isReadonly</code>
      <code>push</code>
      <code>push</code>
      <code>push</code>
      <code>push</code>
      <code>reflectClass</code>
      <code>reflectClass</code>
      <code>reflectClass</code>
      <code>reflectClass</code>
      <code>toLowerString</code>
      <code>toString</code>
      <code>toString</code>
      <code>toString</code>
      <code>toString</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Reflection/ReflectionClassConstant.php">
    <ImpureMethodCall>
      <code>__invoke</code>
      <code>getEndLine</code>
      <code>getStartLine</code>
      <code>isFinal</code>
      <code>isPrivate</code>
      <code>isProtected</code>
      <code>isPublic</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Reflection/ReflectionConstant.php">
    <ImpureMethodCall>
      <code>__invoke</code>
      <code>getEndLine</code>
      <code>getEndLine</code>
      <code>getStartLine</code>
      <code>getStartLine</code>
      <code>toString</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Reflection/ReflectionEnum.php">
    <ImpureFunctionCall>
      <code>array_map</code>
      <code>array_map</code>
    </ImpureFunctionCall>
  </file>
  <file src="src/Reflection/ReflectionEnumCase.php">
    <ImpureMethodCall>
      <code>__invoke</code>
      <code>getEndLine</code>
      <code>getStartLine</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Reflection/ReflectionFunctionAbstract.php">
    <ImpureMethodCall>
      <code>addVisitor</code>
      <code>createFromNode</code>
      <code>getEndLine</code>
      <code>getEndLine</code>
      <code>getEndLine</code>
      <code>getEndLine</code>
      <code>getStartLine</code>
      <code>getStartLine</code>
      <code>getStartLine</code>
      <code>getStartLine</code>
      <code>getStmts</code>
      <code>getSubNodeNames</code>
      <code>hasAttribute</code>
      <code>hasAttribute</code>
      <code>hasAttribute</code>
      <code>hasAttribute</code>
      <code>hasAttribute</code>
      <code>hasAttribute</code>
      <code>hasAttribute</code>
      <code>hasAttribute</code>
      <code>traverse</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Reflection/ReflectionMethod.php">
    <ImpureFunctionCall>
      <code>$closure-&gt;__invoke($implementingClassName, $this-&gt;getName(), $args)</code>
      <code>$closure-&gt;__invoke($object, $this-&gt;getName(), $args)</code>
    </ImpureFunctionCall>
    <ImpureMethodCall>
      <code>classExists</code>
      <code>isAbstract</code>
      <code>isFinal</code>
      <code>isPrivate</code>
      <code>isProtected</code>
      <code>isPublic</code>
      <code>isStatic</code>
      <code>traitExists</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Reflection/ReflectionNamedType.php">
    <ImpureMethodCall>
      <code>reflectClass</code>
      <code>toString</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Reflection/ReflectionObject.php">
    <ImpureMethodCall>
      <code>createFromNode</code>
      <code>getNode</code>
      <code>getValue</code>
      <code>makePublic</code>
      <code>setDefault</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Reflection/ReflectionParameter.php">
    <ImpureMethodCall>
      <code>__invoke</code>
      <code>getEndLine</code>
      <code>getStartLine</code>
      <code>hasAttribute</code>
      <code>hasAttribute</code>
      <code>toLowerString</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Reflection/ReflectionProperty.php">
    <ImpureFunctionCall>
      <code>$closure-&gt;__invoke($implementingClassName, $this-&gt;getName())</code>
      <code>$closure-&gt;__invoke($implementingClassName, $this-&gt;getName(), func_num_args() === 2 ? $value : $object)</code>
      <code>$closure-&gt;__invoke($instance, $this-&gt;getName())</code>
      <code>$closure-&gt;__invoke($instance, $this-&gt;getName(), $value)</code>
    </ImpureFunctionCall>
    <ImpureMethodCall>
      <code>__invoke</code>
      <code>classExists</code>
      <code>getEndLine</code>
      <code>getStartLine</code>
      <code>hasAttribute</code>
      <code>hasAttribute</code>
      <code>isPrivate</code>
      <code>isProtected</code>
      <code>isPublic</code>
      <code>isReadonly</code>
      <code>isStatic</code>
      <code>traitExists</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Reflection/ReflectionType.php">
    <ImpureMethodCall>
      <code>new Identifier('null')</code>
      <code>new Identifier('null')</code>
      <code>new UnionType($types)</code>
      <code>new UnionType([$type, new Identifier('null')])</code>
      <code>toLowerString</code>
      <code>toLowerString</code>
      <code>toLowerString</code>
      <code>toLowerString</code>
      <code>toLowerString</code>
      <code>toLowerString</code>
    </ImpureMethodCall>
    <ImpurePropertyFetch>
      <code>$type-&gt;type</code>
      <code>$type-&gt;types</code>
      <code>$type-&gt;types</code>
    </ImpurePropertyFetch>
  </file>
  <file src="src/Util/CalculateReflectionColumn.php">
    <ImpureMethodCall>
      <code>getEndFilePos</code>
      <code>getStartFilePos</code>
      <code>hasAttribute</code>
      <code>hasAttribute</code>
    </ImpureMethodCall>
  </file>
</files>
