<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="3.11.2@d470903722cfcbc1cd04744c5491d3e6d13ec3d9">
  <file src="src/BetterReflection.php">
    <DocblockTypeContradiction occurrences="1">
      <code>$this-&gt;sourceStubber</code>
    </DocblockTypeContradiction>
  </file>
  <file src="src/Reflection/Adapter/ReflectionClass.php">
    <MethodSignatureMismatch occurrences="5">
      <code>public function getName()</code>
      <code>public function getTraitNames()</code>
      <code>public function newInstance($arg = null, ...$args)</code>
      <code>public function newInstanceWithoutConstructor()</code>
      <code>public function newInstanceArgs(?array $args = null)</code>
    </MethodSignatureMismatch>
    <PossiblyInvalidArgument occurrences="4">
      <code>$class</code>
      <code>$realParentClassName</code>
      <code>$interface</code>
      <code>$realInterfaceName</code>
    </PossiblyInvalidArgument>
    <RedundantCondition occurrences="1">
      <code>is_object($argument)</code>
    </RedundantCondition>
  </file>
  <file src="src/Reflection/Adapter/ReflectionObject.php">
    <MethodSignatureMismatch occurrences="5">
      <code>public function getName()</code>
      <code>public function getTraitNames()</code>
      <code>public function newInstance($arg = null, ...$args)</code>
      <code>public function newInstanceWithoutConstructor()</code>
      <code>public function newInstanceArgs(?array $args = null)</code>
    </MethodSignatureMismatch>
    <PossiblyInvalidArgument occurrences="4">
      <code>$class</code>
      <code>$realParentClassName</code>
      <code>$interface</code>
      <code>$realInterfaceName</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Reflection/ReflectionFunctionAbstract.php">
    <PossiblyInvalidCast occurrences="1">
      <code>$returnType</code>
    </PossiblyInvalidCast>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>$functionNode-&gt;getStmts()</code>
      <code>$this-&gt;loadStaticParser()-&gt;parse('&lt;?php ' . $newBody)</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="src/Reflection/ReflectionMethod.php">
    <InvalidStringClass occurrences="1">
      <code>$declaringClassName::{$methodName}(...$methodArgs)</code>
    </InvalidStringClass>
  </file>
  <file src="src/Reflection/ReflectionParameter.php">
    <PossiblyInvalidCast occurrences="1">
      <code>$type</code>
    </PossiblyInvalidCast>
    <UndefinedPropertyFetch occurrences="1">
      <code>$this-&gt;node-&gt;var-&gt;name</code>
    </UndefinedPropertyFetch>
  </file>
  <file src="src/Reflection/ReflectionProperty.php">
    <PossiblyInvalidCast occurrences="1">
      <code>$type</code>
    </PossiblyInvalidCast>
  </file>
  <file src="src/SourceLocator/Ast/FindReflectionsInTree.php">
    <InternalClass occurrences="1">
      <code>ConstantNodeChecker::assertValidDefineFunctionCall($node)</code>
    </InternalClass>
    <InternalMethod occurrences="1">
      <code>ConstantNodeChecker::assertValidDefineFunctionCall($node)</code>
    </InternalMethod>
  </file>
  <file src="src/SourceLocator/SourceStubber/PhpStormStubsSourceStubber.php">
    <InternalClass occurrences="2">
      <code>ConstantNodeChecker::assertValidDefineFunctionCall($node)</code>
      <code>BuilderHelpers::normalizeValue($constantValue)</code>
    </InternalClass>
    <InternalMethod occurrences="2">
      <code>ConstantNodeChecker::assertValidDefineFunctionCall($node)</code>
      <code>BuilderHelpers::normalizeValue($constantValue)</code>
    </InternalMethod>
  </file>
  <file src="src/SourceLocator/SourceStubber/ReflectionSourceStubber.php">
    <InternalClass occurrences="1">
      <code>BuilderHelpers::normalizeValue($constantReflection-&gt;getValue())</code>
    </InternalClass>
    <InternalMethod occurrences="1">
      <code>BuilderHelpers::normalizeValue($constantReflection-&gt;getValue())</code>
    </InternalMethod>
    <PossiblyNullIterator occurrences="1">
      <code>$classReflection-&gt;getTraitAliases()</code>
    </PossiblyNullIterator>
  </file>
  <file src="src/SourceLocator/Type/AutoloadSourceLocator.php">
    <DocblockTypeContradiction occurrences="1">
      <code>self::$currentAstLocator</code>
    </DocblockTypeContradiction>
    <InternalClass occurrences="1">
      <code>ConstantNodeChecker::assertValidDefineFunctionCall($node)</code>
    </InternalClass>
    <InternalMethod occurrences="1">
      <code>ConstantNodeChecker::assertValidDefineFunctionCall($node)</code>
    </InternalMethod>
  </file>
  <file src="src/SourceLocator/Type/ClosureSourceLocator.php">
    <PossiblyNullReference occurrences="1">
      <code>getLine</code>
    </PossiblyNullReference>
  </file>
  <file src="src/SourceLocator/Type/Composer/Factory/MakeLocatorForComposerJsonAndInstalledJson.php">
    <InvalidScalarArgument occurrences="2"/>
  </file>
  <file src="src/SourceLocator/Type/Composer/Factory/MakeLocatorForInstalledJson.php">
    <InvalidScalarArgument occurrences="2"/>
  </file>
  <file src="src/SourceLocator/Type/DirectoriesSourceLocator.php">
    <DocblockTypeContradiction occurrences="1">
      <code>is_string($directory)</code>
    </DocblockTypeContradiction>
  </file>
  <file src="src/SourceLocator/Type/FileIteratorSourceLocator.php">
    <DocblockTypeContradiction occurrences="1">
      <code>$fileInfo instanceof SplFileInfo</code>
    </DocblockTypeContradiction>
  </file>
</files>
